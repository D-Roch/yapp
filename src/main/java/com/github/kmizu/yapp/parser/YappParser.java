/* Generated By:JavaCC: Do not edit this line. YappParser.java */
package com.github.kmizu.yapp.parser;
import java.util.*;
import com.github.kmizu.yapp.*;
import com.github.kmizu.yapp.parser.*;
import static com.github.kmizu.yapp.Ast.*;

public class YappParser implements YappParserConstants {
  private static Symbol $(String key){
    return Symbol.intern(key);
  }
  private static Position pos(Token t){
        return new Position(t.beginLine, t.beginColumn);
  }
  private static Position pos(int line, int column) {
        return new Position(line, column);
  }
  private static <T> List<T> list(T... ts){
    List<T> lst = new ArrayList<T>();
    for(T t : ts) lst.add(t);
    return lst;
  }
  private static String content(String s){
    return s.substring(1, s.length() - 1);
  }
  private static String action(String s){
    return s.substring(2, s.length() - 2);
  }
  private static String e_action(String s){
    return s.substring(2, s.length() - 1);
  }
  private static String unescape(String s){
        s = content(s);
    StringBuffer sb = new StringBuffer();
    for(int i = 0; i < s.length(); i++){
      char ch = s.charAt(i);
      if(ch != '\\'){
        sb.append(ch);
        continue;
      }
      i++;
      ch = s.charAt(i);
      switch(ch){
      case 'n':
        sb.append('\n');
        break;
      case 't':
        sb.append('\t');
        break;
      case 'b':
        sb.append('\b');
        break;
      case 'r':
        sb.append('\r');
        break;
      case 'f':
        sb.append('\f');
        break;
      case '\'':
        sb.append('\'');
      case '\\':
        sb.append('\\');
        break;
      default:
        sb.append(ch);
        break;
      }
    }
    return new String(sb);
  }

  private static CharClass parseCharClass(Position pos, String text, Symbol var)
    throws ParseException {
        boolean positive = true;
    int start = 0;
    if(text.length() != 0 && text.charAt(0) == '^'){
      positive = false;
      start++;
    }
    List<CharClass.Element> elements = new ArrayList<CharClass.Element>();
    for(int i = start; i < text.length(); i++){
      if(i < text.length() - 2 && text.charAt(i + 1) == '-'){
        char rangeS = text.charAt(i);
        char rangeE = text.charAt(i + 2);
        if(rangeS > rangeE){
          throw new ParseException(
            pos.getLine() + ": range start must be < range end"
          );
        }
        elements.add(new CharClass.Range(rangeS, rangeE));
        i += 2;
      }else{
        elements.add(new CharClass.Char(text.charAt(i)));
      }
    }
    return new CharClass(pos, positive, elements, var);
  }

  final public Grammar parse() throws ParseException {
                  Grammar g;
    g = grammar();
              {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

  final public Grammar grammar() throws ParseException {
  Token t = null, n = null;
  List<Rule> rs = new ArrayList<Rule>(); Rule r;
  List<MacroDefinition> ms = new ArrayList<MacroDefinition>(); MacroDefinition m;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAMMAR:
      t = jj_consume_token(GRAMMAR);
      n = jj_consume_token(ID);
      jj_consume_token(SEMI_COLON);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MACRO:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      m = macro();
              ms.add(m);
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOUNDED:
      case ID:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      if (jj_2_1(2)) {
        r = rule(false);
                               rs.add(r);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOUNDED:
          jj_consume_token(BOUNDED);
          jj_consume_token(LBRACE);
          label_3:
          while (true) {
            r = rule(true);
                                                                               rs.add(r);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOUNDED:
            case ID:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
          }
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
        Position p;
        Symbol s;
        if(t != null) {
          p = pos(t);
          s = $(n.image);
        }else{
          p = pos(1, 1);
          s = null;
        }
        {if (true) return new Grammar(p, s, ms, rs);}
    throw new Error("Missing return statement in function");
  }

  final public MacroDefinition macro() throws ParseException {
  Token t = null, n = null, k = null; List<Symbol> params = new ArrayList<Symbol>();
  Expression e;
    t = jj_consume_token(MACRO);
    n = jj_consume_token(MACRO_NAME);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MACRO_PARAM:
      k = jj_consume_token(MACRO_PARAM);
                                                      params.add($(k.image));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        k = jj_consume_token(MACRO_PARAM);
                                                                                                         params.add($(k.image));
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(EQUAL);
    e = expression();
    jj_consume_token(SEMI_COLON);
   {if (true) return new MacroDefinition(pos(t), $(n.image), params, e);}
    throw new Error("Missing return statement in function");
  }

  final public Rule rule(boolean bounded) throws ParseException {
                             Token t, n, d; String s = null, code = null; Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOUNDED:
      jj_consume_token(BOUNDED);
            bounded = true;
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    if (jj_2_2(2)) {
      t = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODE:
        d = jj_consume_token(CODE);
                                 code = action(d.image);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case LARROW:
        jj_consume_token(LARROW);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = expression();
      jj_consume_token(SEMI_COLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        n = jj_consume_token(ID);
          s = n.image;
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CODE:
          d = jj_consume_token(CODE);
                                          code = action(d.image);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        case LARROW:
          jj_consume_token(LARROW);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        e = expression();
        jj_consume_token(SEMI_COLON);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return new Rule(pos(t), bounded ? 1 : 0, $(t.image), $(s), e, code);}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
                          Expression e;
    e = alt();
           {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression alt() throws ParseException {
                   Token t; Expression e1, e2; List<Expression> es = list();
    e1 = seq();
            es.add(e1);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        t = jj_consume_token(BAR);
        e2 = seq();
                        es.add(e2);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        e2 = seq();
                        es.add(e2);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return es.size() == 1 ? e1 : new N_Alternation(e1.pos(), es);}
    throw new Error("Missing return statement in function");
  }

  final public Expression seq() throws ParseException {
                   Expression e1, e2; List<Expression> es = list();
    e1 = act();
            es.add(e1);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAIL:
      case BOUNDED:
      case ANY:
      case AND:
      case NOT:
      case EMPTY:
      case LPAREN:
      case CUT:
      case MACRO_PARAM:
      case MACRO_NAME:
      case ID:
      case CHAR_CLASS:
      case PREDICATE:
      case STRING:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      e2 = act();
                                    es.add(e2);
    }
   {if (true) return es.size() == 1 ? e1 : new N_Sequence(e1.pos(), es);}
    throw new Error("Missing return statement in function");
  }

  final public Expression act() throws ParseException {
                   Token t; Expression e;
    e = prd();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODE:
      case EXP_CODE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CODE:
        t = jj_consume_token(CODE);
                 e = new Action(pos(t), e, action(t.image));
        break;
      case EXP_CODE:
        t = jj_consume_token(EXP_CODE);
                 e = new SetValueAction(pos(t), e, e_action(t.image));
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression prd() throws ParseException {
                   Token t; Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      e = rep();
                   {if (true) return new AndPredicate(pos(t), e);}
      break;
    case NOT:
      t = jj_consume_token(NOT);
      e = rep();
                   {if (true) return new NotPredicate(pos(t), e);}
      break;
    case FAIL:
    case BOUNDED:
    case ANY:
    case EMPTY:
    case LPAREN:
    case CUT:
    case MACRO_PARAM:
    case MACRO_NAME:
    case ID:
    case CHAR_CLASS:
    case PREDICATE:
    case STRING:
      e = rep();
                   {if (true) return e;}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression rep() throws ParseException {
                   Token t; Expression e;
    e = mac();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTION:
    case STAR:
    case PLUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
                  e = new Repetition(pos(t), e);
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
                  e = new RepetitionPlus(pos(t), e);
        break;
      case QUESTION:
        t = jj_consume_token(QUESTION);
                  e = new Optional(pos(t), e);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression mac() throws ParseException {
                   Token t; Expression e; List<Expression> params = new ArrayList<Expression>();
    if (jj_2_3(2)) {
      t = jj_consume_token(MACRO_NAME);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAIL:
      case BOUNDED:
      case ANY:
      case AND:
      case NOT:
      case EMPTY:
      case LPAREN:
      case CUT:
      case MACRO_PARAM:
      case MACRO_NAME:
      case ID:
      case CHAR_CLASS:
      case PREDICATE:
      case STRING:
        e = expression();
                                                        params.add(e);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_8;
          }
          jj_consume_token(COMMA);
          e = expression();
                                                                                                 params.add(e);
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                                                                                              {if (true) return new MacroCall(pos(t), $(t.image), params);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FAIL:
      case BOUNDED:
      case ANY:
      case EMPTY:
      case LPAREN:
      case CUT:
      case MACRO_PARAM:
      case ID:
      case CHAR_CLASS:
      case PREDICATE:
      case STRING:
        e = prim();
            {if (true) return e;}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression prim() throws ParseException {
                    Token t, n; Symbol v = null; Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case MACRO_PARAM:
    case ID:
    case CHAR_CLASS:
    case STRING:
      if (jj_2_4(2)) {
        n = jj_consume_token(ID);
        jj_consume_token(COLON);
                                v = $(n.image);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
                                                 {if (true) return new NonTerminal(pos(t), $(t.image), v);}
        break;
      case MACRO_PARAM:
        t = jj_consume_token(MACRO_PARAM);
                                                 {if (true) return new MacroVariable(pos(t), $(t.image), v);}
        break;
      case STRING:
        t = jj_consume_token(STRING);
                                                 {if (true) return new StringLiteral(pos(t), content(t.image), v);}
        break;
      case CHAR_CLASS:
        t = jj_consume_token(CHAR_CLASS);
                                                 {if (true) return parseCharClass(pos(t), unescape(t.image), v);}
        break;
      case ANY:
        t = jj_consume_token(ANY);
                                                 {if (true) return new Wildcard(pos(t), v);}
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case FAIL:
      t = jj_consume_token(FAIL);
                                                 {if (true) return new Fail(pos(t));}
      break;
    case PREDICATE:
      t = jj_consume_token(PREDICATE);
                                                 {if (true) return new SemanticPredicate(pos(t), e_action(t.image));}
      break;
    case CUT:
      t = jj_consume_token(CUT);
                                                 {if (true) return new Cut(pos(t));}
      break;
    case EMPTY:
      t = jj_consume_token(EMPTY);
                                                 {if (true) return new Empty(pos(t));}
      break;
    case BOUNDED:
      t = jj_consume_token(BOUNDED);
      jj_consume_token(LBRACE);
      e = expression();
      jj_consume_token(RBRACE);
                                                 {if (true) return new BoundedExpression(e);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      e = expression();
      jj_consume_token(RPAREN);
                                                 {if (true) return e;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(MACRO_NAME)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(CODE)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(BOUNDED)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  public YappParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80,0x400,0x200,0x200,0x200,0x10000000,0x40000000,0x200,0x0,0x3000,0x0,0x3000,0x0,0xc0000,0xc0000,0xc8c0cb00,0x0,0x0,0xc8c0cb00,0x310000,0x310000,0x10000000,0xc8c0cb00,0x48c00b00,0x40000800,0x48c00b00,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x4,0x0,0x4,0x0,0x1,0x0,0x0,0x33,0xc,0xc,0x33,0x0,0x0,0x0,0x33,0x33,0x23,0x33,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public YappParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public YappParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YappParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public YappParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new YappParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public YappParser(YappParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(YappParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[38];
    for (int i = 0; i < 38; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
